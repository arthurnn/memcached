diff --git a/libmemcached-0.32/libmemcached/memcached_auto.c b/libmemcached-0.32/libmemcached/memcached_auto.c
--- a/libmemcached-0.32/libmemcached/memcached_auto.c
+++ b/libmemcached-0.32/libmemcached/memcached_auto.c
@@ -82,20 +82,26 @@ static memcached_return binary_incr_decr(memcached_st *ptr, uint8_t cmd,
       cmd= PROTOCOL_BINARY_CMD_INCREMENTQ;
   }
   protocol_binary_request_incr request= {.bytes= {0}};
+  
+  uint16_t key_with_prefix_length = strlen(ptr->prefix_key) + strlen(key);
+  char *key_with_prefix = alloca(key_with_prefix_length + 1);
+  strcpy(key_with_prefix, ptr->prefix_key);
+  strcat(key_with_prefix, key);
+  
 
   request.message.header.request.magic= PROTOCOL_BINARY_REQ;
   request.message.header.request.opcode= cmd;
-  request.message.header.request.keylen= htons((uint16_t) key_length);
+  request.message.header.request.keylen= htons((uint16_t) key_with_prefix_length);
   request.message.header.request.extlen= 20;
   request.message.header.request.datatype= PROTOCOL_BINARY_RAW_BYTES;
-  request.message.header.request.bodylen= htonl((uint32_t) (key_length + request.message.header.request.extlen));
+  request.message.header.request.bodylen= htonl((uint32_t) (key_with_prefix_length + request.message.header.request.extlen));
   request.message.body.delta= htonll(offset);
   request.message.body.initial= htonll(initial);
   request.message.body.expiration= htonl((uint32_t) expiration);
 
   if ((memcached_do(&ptr->hosts[server_key], request.bytes,
                     sizeof(request.bytes), 0)!=MEMCACHED_SUCCESS) ||
-      (memcached_io_write(&ptr->hosts[server_key], key, key_length, 1) == -1)) 
+      (memcached_io_write(&ptr->hosts[server_key], key_with_prefix, key_with_prefix_length, 1) == -1)) 
   {
     memcached_io_reset(&ptr->hosts[server_key]);
     return MEMCACHED_WRITE_FAILURE;
